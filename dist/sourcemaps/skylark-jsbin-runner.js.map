{"version":3,"sources":["skylark-jsbin-runner.js"],"names":["define","skylark","jsbin","attach","runner","loopProtect","hit","line","console","warn","postMessage","parent","origin","error","args","concat","slice","call","arguments","window","alert","join","handleMessage","event","data","JSON","parse","e","message","commands","type","source","stringify","location","protocol","host","utils","prependChild","elem","child","insertBefore","firstChild","addEvent","fn","addEventListener","attachEvent","throttle","delay","throttled","context","this","cancel","timer","setTimeout","apply","clearTimeout","cleanse","s","replace","m","&","<","getIframeWindow","iframeElement","contentWindow","contentDocument","parentWindow","sandbox","target","old","active","state","guid","Date","create","iframe","document","createElement","setAttribute","id","use","done","Error","saveState","iframes","getElementsByTagName","length","i","parentNode","removeChild","restoreState","win","scroll","scrollTo","x","y","scrollX","scrollY","wrap","childWindow","options","getSizeProperties","width","innerWidth","documentElement","clientWidth","height","innerHeight","clientHeight","offsetWidth","offsetHeight","eval","cmd","re","test","all","str","arg","output","proxyConsole","injectScript","url","cb","childDocument","script","src","onload","onerror","body","appendChild","injectDOM","html","innerHTML","render","injectCSS","style","getElementById","childDoc","methods","forEach","method","processor","open","write","runnerWindow","protect","reset","msg","col","_raw","stack","close","console:run","console:load:script","err","console:load:dom","regex","blockingMethods","kill","restore","getDoctype","doctype","match","tail","substr","debug","combinedSource","realtime","requested","noRealtimeJs","includeJsInRealtime","doctypeObj","push","log","prototype","originalArgs","newArgs","stringifyArgs","shift","clear","init","name","main"],"mappings":"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","file":"../skylark-jsbin-runner.js","sourcesContent":["define('skylark-jsbin-runner/jsbin',[\r\n\t\"skylark-langx-ns\"\r\n],function(skylark){\r\n\tvar jsbin =  skylark.attach(\"intg.jsbin\");\r\n\treturn jsbin;\r\n});\ndefine('skylark-jsbin-runner/runner',[\r\n   \"./jsbin\"\r\n],function (jsbin) {\r\n  /** ============================================================================\r\n   * JS Bin Runner\r\n   * Accepts incoming postMessage events and updates a live iframe accordingly.\r\n   * ========================================================================== */\r\n  /*globals sandbox loopProtect window alert */\r\n    'use strict';\r\n    var runner = {};\r\n\r\n    /**\r\n     * Update the loop protoction hit function to send an event up to the parent\r\n     * window so we can insert it in our error UI\r\n     */\r\n    loopProtect.hit = function (line) {\r\n      console.warn('Exiting potential infinite loop at line ' + line + '. To disable loop protection: add \"// noprotect\" to your code');\r\n      runner.postMessage('loopProtectHit', line);\r\n    }\r\n\r\n    /**\r\n     * Store what parent origin *should* be\r\n     */\r\n    runner.parent = {};\r\n    runner.parent.origin = '*';\r\n\r\n    /**\r\n     * Log error messages, indicating that it's from the runner.\r\n     */\r\n    runner.error = function () {\r\n      var args = ['Runner:'].concat([].slice.call(arguments));\r\n      if (!('console' in window)) {return alert(args.join(' '));}\r\n      //window.console.error.apply(console, args);\r\n    };\r\n\r\n    /**\r\n     * Handle all incoming postMessages to the runner\r\n     */\r\n    runner.handleMessage = function (event) {\r\n      if (!event.origin) {return;}\r\n      var data = event.data;\r\n      try {\r\n        data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;\r\n      } catch (e) {\r\n        return runner.error('Error parsing event data:', e.message);\r\n      }\r\n      if (runner.commands && typeof runner.commands[data.type] !== 'function') {\r\n        return runner.error('No matching event handler:', data.type);\r\n      }\r\n      runner.parent.source = event.source;\r\n      try {\r\n        runner.commands[data.type](data.data);\r\n      } catch (e) {\r\n        runner.error(e.message);\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Send message to the parent window\r\n     */\r\n    runner.postMessage = function (type, data) {\r\n      if (!runner.parent.source) {\r\n        return runner.error('No postMessage connection to parent window.');\r\n      }\r\n      runner.parent.source.postMessage(JSON.stringify({\r\n        type: type,\r\n        data: data\r\n      }), runner.parent.origin);\r\n    };\r\n\r\n     return jsbin.runner = runner;\r\n\r\n});\ndefine('skylark-jsbin-runner/utils',[\r\n   \"./runner\"\r\n],function (runner) {\r\n  /**\r\n   * Utilities & polyfills\r\n   */\r\n\r\n  var prependChild = function(elem, child) { \r\n    elem.insertBefore(child, elem.firstChild); \r\n  };\r\n\r\n  var addEvent = function(elem, event, fn) {\r\n    if (elem.addEventListener) {\r\n      elem.addEventListener(event, fn, false);\r\n    } else {\r\n      elem.attachEvent(\"on\" + event, function() {\r\n        // set the this pointer same as addEventListener when fn is called\r\n        return(fn.call(elem, window.event));\r\n      });\r\n    }\r\n  };\r\n\r\n  if (!window.location.origin) {\r\n    window.location.origin = window.location.protocol+\"//\"+window.location.host;\r\n  }\r\n\r\n  var throttle = function (fn, delay) {\r\n    var timer = null;\r\n    var throttled = function () {\r\n      var context = this, args = arguments;\r\n      throttled.cancel();\r\n      throttled.timer = setTimeout(function () {\r\n        fn.apply(context, args);\r\n      }, delay);\r\n    };\r\n\r\n    throttled.cancel = function () {\r\n      clearTimeout(throttled.timer);\r\n    };\r\n\r\n    return throttled;\r\n  };\r\n\r\n  var cleanse = function (s) {\r\n    return (s||'').replace(/[<&]/g, function (m) { return {'&':'&amp;','<':'&lt;'}[m];});\r\n  };\r\n\r\n  var getIframeWindow = function (iframeElement) {\r\n      return iframeElement.contentWindow || iframeElement.contentDocument.parentWindow;\r\n  };\r\n\r\n  return runner.utils = {\r\n    prependChild,\r\n    addEvent,\r\n    throttle,\r\n    cleanse,\r\n    getIframeWindow\r\n  }\r\n});\ndefine('skylark-jsbin-runner/sandbox',[\r\n   \"./runner\",\r\n   \"./utils\"\r\n],function (runner,utils) {\r\n  /** ============================================================================\r\n   * Sandbox\r\n   * Handles creating and insertion of dynamic iframes\r\n   * ========================================================================== */\r\n\r\n  /*globals window document */\r\n\r\n    var sandbox = {};\r\n\r\n    /**\r\n     * Save the target container element, plus the old and active iframes.\r\n     */\r\n    sandbox.target = null;\r\n    sandbox.old = null;\r\n    sandbox.active = null;\r\n    sandbox.state = {};\r\n    sandbox.guid = +new Date(); // id used to keep track of which iframe is active\r\n\r\n    /**\r\n     * Create a new sandboxed iframe.\r\n     */\r\n    sandbox.create = function () {\r\n      var iframe = document.createElement('iframe');\r\n      // iframe.src = window.location.origin + '/runner-inner';\r\n      iframe.setAttribute('sandbox', 'allow-modals allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts');\r\n      iframe.setAttribute('frameBorder', '0');\r\n      iframe.setAttribute('name', 'JS Bin Output ');\r\n      iframe.id = sandbox.guid++;\r\n      // sandbox.active = iframe;\r\n      return iframe;\r\n    };\r\n\r\n    /**\r\n     * Add a new iframe to the page and wait until it has loaded to call the\r\n     * requester back. Also wait until the new iframe has loaded before removing\r\n     * the old one.\r\n     */\r\n    /**\r\n     * Add a new iframe to the page and wait until it has loaded to call the\r\n     * requester back. Also wait until the new iframe has loaded before removing\r\n     * the old one.\r\n     */\r\n    sandbox.use = function (iframe, done) {\r\n      if (!sandbox.target) {\r\n        throw new Error('Sandbox has no target element.');\r\n      }\r\n      sandbox.old = sandbox.active;\r\n      sandbox.saveState(sandbox.old);\r\n      sandbox.active = iframe;\r\n      utils.prependChild(sandbox.target, iframe);\r\n      // setTimeout allows the iframe to be rendered before other code runs,\r\n      // allowing us access to the calculated properties like innerWidth.\r\n      setTimeout(function () {\r\n        // call the code that renders the iframe source\r\n        if (done) {\r\n          done();\r\n        }\r\n\r\n        // remove *all* the iframes, baring the active one\r\n        var iframes = sandbox.target.getElementsByTagName('iframe');\r\n        var length = iframes.length;\r\n        var i = 0;\r\n        var id = sandbox.active.id;\r\n        var iframe;\r\n\r\n        for (; iframe = iframes[i], i < length; i++) {\r\n          if (iframe.id !== id) {\r\n            iframe.parentNode.removeChild(iframe);\r\n            length--;\r\n          }\r\n        }\r\n      }, 0);\r\n    };\r\n\r\n    /**\r\n     * Restore the state of a prvious iframe, like scroll position.\r\n     */\r\n    sandbox.restoreState = function (iframe, state) {\r\n      if (!iframe) return {};\r\n      var win = utils.getIframeWindow(iframe);\r\n      if (!win) return {};\r\n      if (state.scroll) {\r\n        win.scrollTo(state.scroll.x, state.scroll.y);\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Save the state of an iframe, like scroll position.\r\n     */\r\n    sandbox.saveState = function (iframe) {\r\n      if (!iframe) return {};\r\n      var win = utils.getIframeWindow(iframe);\r\n      if (!win) return {};\r\n      return {\r\n        scroll: {\r\n          x: win.scrollX,\r\n          y: win.scrollY\r\n        }\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Attach event listeners and rpevent some default behaviour on the new\r\n     * window during live rendering.\r\n     */\r\n    sandbox.wrap = function (childWindow, options) {\r\n      if (!childWindow) return;\r\n      options = options || {};\r\n\r\n      // Notify the parent of resize events (and send one straight away)\r\n      utils.addEvent(childWindow, 'resize', utils.throttle(function () {\r\n        runner.postMessage('resize', sandbox.getSizeProperties(childWindow));\r\n      }, 25));\r\n\r\n      runner.postMessage('resize', sandbox.getSizeProperties(childWindow));\r\n\r\n      // Notify the parent of a focus\r\n      utils.addEvent(childWindow, 'focus', function () {\r\n        runner.postMessage('focus');\r\n      });\r\n\r\n    };\r\n\r\n    sandbox.getSizeProperties = function (childWindow) {\r\n      return {\r\n        width: childWindow.innerWidth || childWindow.document.documentElement.clientWidth,\r\n        height: childWindow.innerHeight || childWindow.document.documentElement.clientHeight,\r\n        offsetWidth: childWindow.document.documentElement.offsetWidth,\r\n        offsetHeight: childWindow.document.documentElement.offsetHeight\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Evaluate a command against the active iframe, then use the proxy console\r\n     * to fire information up to the parent\r\n     */\r\n    sandbox.eval = function (cmd) {\r\n      if (!sandbox.active) throw new Error(\"sandbox.eval: has no active iframe.\");\r\n\r\n      var re = /(^.|\\b)console\\.(\\S+)/g;\r\n\r\n      if (re.test(cmd)) {\r\n        var replaceWith = 'window.runnerWindow.proxyConsole.';\r\n        cmd = cmd.replace(re, function (all, str, arg) {\r\n          return replaceWith + arg;\r\n        });\r\n      }\r\n\r\n      var childWindow = sandbox.active.contentWindow;\r\n      var output = null,\r\n          type = 'log';\r\n      try {\r\n        output = childWindow.eval(cmd);\r\n      } catch (e) {\r\n        output = e.message;\r\n        type = 'error';\r\n      }\r\n\r\n      return proxyConsole[type](output);\r\n    };\r\n\r\n    /**\r\n     * Inject a script via a URL into the page\r\n     */\r\n    sandbox.injectScript = function (url, cb) {\r\n      if (!sandbox.active) throw new Error(\"sandbox.injectScript: has no active iframe.\");\r\n      var childWindow = sandbox.active.contentWindow,\r\n          childDocument = childWindow.document;\r\n      var script = childDocument.createElement('script');\r\n      script.src = url;\r\n      script.onload = function () {\r\n        cb();\r\n      };\r\n      script.onerror = function () {\r\n        cb('Failed to load \"' + url + '\"');\r\n      };\r\n      childDocument.body.appendChild(script);\r\n    };\r\n\r\n    /**\r\n     * Inject full DOM into the page\r\n     */\r\n    sandbox.injectDOM = function (html, cb) {\r\n      if (!sandbox.active) throw new Error(\"sandbox.injectDOM: has no active iframe.\");\r\n      var childWindow = sandbox.active.contentWindow,\r\n          childDocument = childWindow.document;\r\n      try {\r\n        childDocument.body.innerHTML = html;\r\n      } catch (e) {\r\n        cb(\"Failed to load DOM.\");\r\n      }\r\n      cb();\r\n    };\r\n\r\n    return runner.sandbox = sandbox;\r\n\r\n});\ndefine('skylark-jsbin-runner/commands',[\r\n   \"./runner\",\r\n   \"./utils\",\r\n   \"./sandbox\"\r\n],function (runner,utils,sandbox) {\r\n  /** ============================================================================\r\n   * JS Bin Runner\r\n   * Accepts incoming postMessage events and updates a live iframe accordingly.\r\n   * ========================================================================== */\r\n  /*globals sandbox loopProtect window alert */\r\n    'use strict';\r\n\r\n    var commands = {};\r\n\r\n    /**\r\n     * Render a new preview iframe using the posted source\r\n     */\r\n    commands.render = function (data) {\r\n      // if we're just changing CSS, let's try to inject the change\r\n      // instead of doing a full render\r\n      if (data.options.injectCSS) {\r\n        if (sandbox.active) {\r\n          var style = sandbox.active.contentDocument.getElementById('jsbin-css');\r\n          if (style) {\r\n            style.innerHTML = data.source;\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      var iframe = sandbox.create(data.options);\r\n      sandbox.use(iframe, function () {\r\n        var childDoc = iframe.contentDocument,\r\n            childWindow = utils.getIframeWindow(iframe);\r\n        if (!childDoc) childDoc = childWindow.document;\r\n\r\n        // Reset the console to the prototype state\r\n        proxyConsole.methods.forEach(function (method) {\r\n          delete proxyConsole[method];\r\n        });\r\n\r\n\r\n        // Process the source according to the options passed in\r\n        var source = processor.render(data.source, data.options);\r\n\r\n        // Start writing the page. This will clear any existing document.\r\n        childDoc.open();\r\n\r\n        // We need to write a blank line first – Firefox blows away things you add\r\n        // to the child window when you do the fist document.write.\r\n        // Note that each document.write fires a DOMContentLoaded in Firefox.\r\n        // This method exhibits synchronous and asynchronous behaviour, depending\r\n        // on the browser. Urg.\r\n        childDoc.write('');\r\n\r\n        // Give the child a reference to things it needs. This has to go here so\r\n        // that the user's code (that runs as a result of the following\r\n        // childDoc.write) can access the objects.\r\n        childWindow.runnerWindow = {\r\n          proxyConsole: proxyConsole,\r\n          protect: loopProtect,\r\n        };\r\n\r\n        childWindow.console = proxyConsole;\r\n\r\n        // Reset the loop protection before rendering\r\n        loopProtect.reset();\r\n\r\n        // if there's a parse error this will fire\r\n        childWindow.onerror = function (msg, url, line, col, error) {\r\n          // show an error on the jsbin console, but not the browser console\r\n          // (i.e. use _raw), because the browser will throw the native error\r\n          // which (hopefully) includes a link to the JavaScript VM at that time.\r\n          proxyConsole._raw('error', error && error.stack ? error.stack : msg + ' (line ' + line + ')');\r\n        };\r\n\r\n        // Write the source out. IE crashes if you have lots of these, so that's\r\n        // why the source is rendered above (processor.render) – it should be one\r\n        // string. IE's a sensitive soul.\r\n        childDoc.write(source);\r\n        // childDoc.documentElement.innerHTML = source;\r\n\r\n        // Close the document. This will fire another DOMContentLoaded.\r\n        childDoc.close();\r\n\r\n        runner.postMessage('complete');\r\n\r\n        // Setup the new window\r\n        sandbox.wrap(childWindow, data.options);\r\n      });\r\n    };\r\n\r\n    /**\r\n     * Run console commands against the iframe's scope\r\n     */\r\n    commands['console:run'] = function (cmd) {\r\n      sandbox.eval(cmd);\r\n    };\r\n\r\n    /**\r\n     * Load script into the apge\r\n     */\r\n    commands['console:load:script'] = function (url) {\r\n      sandbox.injectScript(url, function (err) {\r\n        if (err) return runner.postMessage('console:load:script:error', err);\r\n        runner.postMessage('console:load:script:success', url);\r\n      });\r\n    };\r\n\r\n    /**\r\n     * Load DOM into the apge\r\n     */\r\n    commands['console:load:dom'] = function (html) {\r\n      sandbox.injectDOM(html, function (err) {\r\n        if (err) return runner.postMessage('console:load:dom:error', err);\r\n        runner.postMessage('console:load:dom:success');\r\n      });\r\n    };\r\n\r\n    return runner.commands = commands;\r\n\r\n});\ndefine('skylark-jsbin-runner/processor',[\r\n   \"./runner\"\r\n],function (runner) {\r\n  /** =========================================================================\r\n   * Processor\r\n   * Modify the prepared source ready to be written to an iframe\r\n   * ========================================================================== */\r\n\r\n    var processor = {};\r\n\r\n    processor.blockingMethods = {\r\n      kill: '<script>(function(){window.__blocked={methods:[\"open\",\"print\",\"alert\",\"prompt\",\"confirm\"],old:{}};for(var m in __blocked.methods){try {__blocked.old[m]=window[m];window[m]=function(){};}catch(e){}}})()</script>',\r\n      // RS: the empty comment in the end of the harness, ensures any\r\n      // open comments are closed, and will ensure the harness is hidden\r\n      // from the user.\r\n      restore: '<!--jsbin live harness--><script>(function(){for(var m in __blocked.methods){try{window[m]=__blocked.old[m];delete __blocked;}catch(e){}};})()</script>'\r\n    };\r\n\r\n    /**\r\n     * Grab the doctype from a string.\r\n     *\r\n     * Returns an object with doctype and tail keys.\r\n     */\r\n    processor.getDoctype = (function () {\r\n      // Cached regex\r\n      // [\\s\\S] matches multiline doctypes\r\n      var regex = /<!doctype [\\s\\S]*?>/i;\r\n      return function (str) {\r\n        var doctype = (str.match(regex) || [''])[0],\r\n            tail = str.substr(doctype.length);\r\n        return {\r\n          doctype: doctype,\r\n          tail: tail\r\n        };\r\n      };\r\n    }());\r\n\r\n    /**\r\n     * Replace HTML characters with encoded equivatents for debug mode.\r\n     */\r\n    processor.debug = function (source) {\r\n      return '<pre>' + source.replace(/[<>&]/g, function (m) {\r\n        if (m == '<') return '&lt;';\r\n        if (m == '>') return '&gt;';\r\n        if (m == '&') return '&amp;';\r\n      }) + '</pre>';\r\n    };\r\n\r\n    /**\r\n     * Render – build the final source code to be written to the iframe. Takes\r\n     * the original source and an options object.\r\n     */\r\n    processor.render = function (source, options) {\r\n\r\n      options = options || {};\r\n      source = source || '';\r\n\r\n      var combinedSource = [],\r\n          realtime = (options.requested !== true),\r\n          noRealtimeJs = (options.includeJsInRealtime === false);\r\n\r\n      // If the render was realtime and we don't want javascript in realtime\r\n      // renders – Auto-run JS is unchecked – then strip out the Javascript\r\n      if (realtime && noRealtimeJs) {\r\n        source = source.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\r\n      }\r\n\r\n      // Strip autofocus from the markup, preventing the focus switching out of\r\n      // the editable area.\r\n      source = source.replace(/(<.*?\\s)(autofocus)/g, '$1');\r\n\r\n      // Make sure the doctype is the first thing in the source\r\n      var doctypeObj = processor.getDoctype(source),\r\n          doctype = doctypeObj.doctype;\r\n      source = doctypeObj.tail;\r\n      combinedSource.push(doctype);\r\n\r\n      // Kill the blocking functions\r\n      // IE requires that this is done in the script, rather than off the window\r\n      // object outside of the doc.write.\r\n      if (realtime && options.includeJsInRealtime) {\r\n        combinedSource.push(processor.blockingMethods.kill);\r\n      }\r\n\r\n      // Push the source, split from the doctype above.\r\n      combinedSource.push(source);\r\n\r\n      // Restore the blocking functions\r\n      if (realtime && options.includeJsInRealtime) {\r\n        combinedSource.push(processor.blockingMethods.restore);\r\n      }\r\n\r\n      // In debug mode return an escaped version\r\n      if (options.debug) {\r\n        return processor.debug(combinedSource.join('\\n'));\r\n      }\r\n\r\n      return combinedSource.join('\\n');\r\n\r\n    };\r\n\r\n    return runner.processor = processor;\r\n\r\n});\r\n\ndefine('skylark-jsbin-runner/proxy-console',[\r\n   \"./runner\"\r\n],function (runner) {\r\n  /** =========================================================================\r\n   * Console\r\n   * Proxy console.logs out to the parent window\r\n   * ========================================================================== */\r\n\r\n  var proxyConsole = (function () {\r\n    'use strict';\r\n    /*global stringify, runner*/\r\n    var supportsConsole = true;\r\n    try { window.console.log('d[ o_0 ]b'); } catch (e) { supportsConsole = false; }\r\n\r\n    var proxyConsole = function() {};\r\n\r\n    /**\r\n     * Stringify all of the console objects from an array for proxying\r\n     */\r\n    var stringifyArgs = function (args) {\r\n      var newArgs = [];\r\n      // TODO this was forEach but when the array is [undefined] it wouldn't\r\n      // iterate over them\r\n      var i = 0, length = args.length, arg;\r\n      for(; i < length; i++) {\r\n        arg = args[i];\r\n        if (typeof arg === 'undefined') {\r\n          newArgs.push('undefined');\r\n        } else {\r\n          newArgs.push(stringify(arg));\r\n        }\r\n      }\r\n      return newArgs;\r\n    };\r\n\r\n    // Create each of these methods on the proxy, and postMessage up to JS Bin\r\n    // when one is called.\r\n    var methods = proxyConsole.prototype.methods = [\r\n      'debug', 'clear', 'error', 'info', 'log', 'warn', 'dir', 'props', '_raw',\r\n      'group', 'groupEnd', 'dirxml', 'table', 'trace', 'assert', 'count',\r\n      'markTimeline', 'profile', 'profileEnd', 'time', 'timeEnd', 'timeStamp',\r\n      'groupCollapsed'\r\n    ];\r\n\r\n    methods.forEach(function (method) {\r\n      // Create console method\r\n      proxyConsole.prototype[method] = function () {\r\n        // Replace args that can't be sent through postMessage\r\n        var originalArgs = [].slice.call(arguments),\r\n            args = stringifyArgs(originalArgs);\r\n\r\n        // Post up with method and the arguments\r\n        runner.postMessage('console', {\r\n          method: method === '_raw' ? originalArgs.shift() : method,\r\n          args: method === '_raw' ? args.slice(1) : args\r\n        });\r\n\r\n        // If the browner supports it, use the browser console but ignore _raw,\r\n        // as _raw should only go to the proxy console.\r\n        // Ignore clear if it doesn't exist as it's beahviour is different than\r\n        // log and we let it fallback to jsconsole for the panel and to nothing\r\n        // for the browser console\r\n        if (window.console) {\r\n          if (!console[method]) {\r\n            method = 'log';\r\n          }\r\n\r\n          if (window.console && method !== '_raw') {\r\n            if (method !== 'clear' || (method === 'clear' && console.clear)) {\r\n              console[method].apply(console, originalArgs);\r\n            }\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    return new proxyConsole();\r\n\r\n  }());\r\n\r\n  return runner.proxyConsole = proxyConsole;\r\n});\ndefine('skylark-jsbin-runner/init',[\r\n  \"./runner\",\r\n  \"./utils\",\r\n  \"./sandbox\",\r\n],function(runner,utils,sandbox){\r\n\r\n\r\n  /** =========================================================================\r\n   * JS Bin Runner\r\n   * ========================================================================== */\r\n  function init() {\r\n\r\n\r\n    window.onload = function () {\r\n      // from index.js\r\n\r\n      /**\r\n       * Live rendering, basic mode.\r\n       * Fallback - load the bin into a new iframe, and let it keep itself up\r\n       * to date using event stream.\r\n       */\r\n      if (!window.postMessage) {\r\n        var iframe = document.createElement('iframe');\r\n        iframe.setAttribute('sandbox', 'allow-modals allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts');\r\n        iframe.setAttribute('frameBorder', '0');\r\n        document.body.appendChild(iframe);\r\n        iframe.src = window.name;\r\n        return;\r\n      }\r\n\r\n      /**\r\n       * Live rendering, postMessage style.\r\n       */\r\n\r\n      // Set the sandbox target\r\n      sandbox.target = document.getElementById('sandbox-wrapper');\r\n      // Hook into postMessage\r\n      utils.addEvent(window, 'message', runner.handleMessage);\r\n\r\n    };\r\n\r\n  }\r\n\r\n  return runner.init = init;\r\n\r\n});\r\n\ndefine('skylark-jsbin-runner/main',[\r\n\t\"./runner\",\r\n\t\"./commands\",\r\n\t\"./processor\",\r\n\t\"./proxy-console\",\r\n\t\"./runner\",\r\n\t\"./sandbox\",\r\n\t\"./utils\",\r\n\t\"./init\"\r\n],function(runner){\r\n\treturn runner;\r\n});\ndefine('skylark-jsbin-runner', ['skylark-jsbin-runner/main'], function (main) { return main; });\n\n"]}