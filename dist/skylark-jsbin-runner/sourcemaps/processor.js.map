{"version":3,"sources":["processor.js"],"names":["define","runner","regex","processor","blockingMethods","kill","restore","getDoctype","str","doctype","match","tail","substr","length","debug","source","replace","m","render","options","combinedSource","realtime","requested","noRealtimeJs","includeJsInRealtime","doctypeObj","push","join"],"mappings":";;;;;;;AAAAA,QACG,YACD,SAAUC,GAMR,IAkBMC,EAlBFC,KA6FJ,OA3FAA,EAAUC,iBACRC,KAAM,sNAINC,QAAS,kKAQXH,EAAUI,YAGJL,EAAQ,uBACL,SAAUM,GACf,IAAIC,GAAWD,EAAIE,MAAMR,KAAW,KAAK,GAEzC,OACEO,QAASA,EACTE,KAHSH,EAAII,OAAOH,EAAQI,WAWlCV,EAAUW,MAAQ,SAAUC,GAC1B,MAAO,QAAUA,EAAOC,QAAQ,SAAU,SAAUC,GAClD,MAAS,KAALA,EAAiB,OACZ,KAALA,EAAiB,OACZ,KAALA,EAAiB,aAArB,IACG,UAOPd,EAAUe,OAAS,SAAUH,EAAQI,GAEnCA,EAAUA,MACVJ,EAASA,GAAU,GAEnB,IAAIK,KACAC,GAAkC,IAAtBF,EAAQG,UACpBC,GAAgD,IAAhCJ,EAAQK,oBAIxBH,GAAYE,IACdR,EAASA,EAAOC,QAAQ,sDAAuD,KAKjFD,EAASA,EAAOC,QAAQ,uBAAwB,MAGhD,IAAIS,EAAatB,EAAUI,WAAWQ,GAClCN,EAAUgB,EAAWhB,QAoBzB,OAnBAM,EAASU,EAAWd,KACpBS,EAAeM,KAAKjB,GAKhBY,GAAYF,EAAQK,qBACtBJ,EAAeM,KAAKvB,EAAUC,gBAAgBC,MAIhDe,EAAeM,KAAKX,GAGhBM,GAAYF,EAAQK,qBACtBJ,EAAeM,KAAKvB,EAAUC,gBAAgBE,SAI5Ca,EAAQL,MACHX,EAAUW,MAAMM,EAAeO,KAAK,OAGtCP,EAAeO,KAAK,OAItB1B,EAAOE,UAAYA","file":"../processor.js","sourcesContent":["define([\r\n   \"./runner\"\r\n],function (runner) {\r\n  /** =========================================================================\r\n   * Processor\r\n   * Modify the prepared source ready to be written to an iframe\r\n   * ========================================================================== */\r\n\r\n    var processor = {};\r\n\r\n    processor.blockingMethods = {\r\n      kill: '<script>(function(){window.__blocked={methods:[\"open\",\"print\",\"alert\",\"prompt\",\"confirm\"],old:{}};for(var m in __blocked.methods){try {__blocked.old[m]=window[m];window[m]=function(){};}catch(e){}}})()</script>',\r\n      // RS: the empty comment in the end of the harness, ensures any\r\n      // open comments are closed, and will ensure the harness is hidden\r\n      // from the user.\r\n      restore: '<!--jsbin live harness--><script>(function(){for(var m in __blocked.methods){try{window[m]=__blocked.old[m];delete __blocked;}catch(e){}};})()</script>'\r\n    };\r\n\r\n    /**\r\n     * Grab the doctype from a string.\r\n     *\r\n     * Returns an object with doctype and tail keys.\r\n     */\r\n    processor.getDoctype = (function () {\r\n      // Cached regex\r\n      // [\\s\\S] matches multiline doctypes\r\n      var regex = /<!doctype [\\s\\S]*?>/i;\r\n      return function (str) {\r\n        var doctype = (str.match(regex) || [''])[0],\r\n            tail = str.substr(doctype.length);\r\n        return {\r\n          doctype: doctype,\r\n          tail: tail\r\n        };\r\n      };\r\n    }());\r\n\r\n    /**\r\n     * Replace HTML characters with encoded equivatents for debug mode.\r\n     */\r\n    processor.debug = function (source) {\r\n      return '<pre>' + source.replace(/[<>&]/g, function (m) {\r\n        if (m == '<') return '&lt;';\r\n        if (m == '>') return '&gt;';\r\n        if (m == '&') return '&amp;';\r\n      }) + '</pre>';\r\n    };\r\n\r\n    /**\r\n     * Render – build the final source code to be written to the iframe. Takes\r\n     * the original source and an options object.\r\n     */\r\n    processor.render = function (source, options) {\r\n\r\n      options = options || {};\r\n      source = source || '';\r\n\r\n      var combinedSource = [],\r\n          realtime = (options.requested !== true),\r\n          noRealtimeJs = (options.includeJsInRealtime === false);\r\n\r\n      // If the render was realtime and we don't want javascript in realtime\r\n      // renders – Auto-run JS is unchecked – then strip out the Javascript\r\n      if (realtime && noRealtimeJs) {\r\n        source = source.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\r\n      }\r\n\r\n      // Strip autofocus from the markup, preventing the focus switching out of\r\n      // the editable area.\r\n      source = source.replace(/(<.*?\\s)(autofocus)/g, '$1');\r\n\r\n      // Make sure the doctype is the first thing in the source\r\n      var doctypeObj = processor.getDoctype(source),\r\n          doctype = doctypeObj.doctype;\r\n      source = doctypeObj.tail;\r\n      combinedSource.push(doctype);\r\n\r\n      // Kill the blocking functions\r\n      // IE requires that this is done in the script, rather than off the window\r\n      // object outside of the doc.write.\r\n      if (realtime && options.includeJsInRealtime) {\r\n        combinedSource.push(processor.blockingMethods.kill);\r\n      }\r\n\r\n      // Push the source, split from the doctype above.\r\n      combinedSource.push(source);\r\n\r\n      // Restore the blocking functions\r\n      if (realtime && options.includeJsInRealtime) {\r\n        combinedSource.push(processor.blockingMethods.restore);\r\n      }\r\n\r\n      // In debug mode return an escaped version\r\n      if (options.debug) {\r\n        return processor.debug(combinedSource.join('\\n'));\r\n      }\r\n\r\n      return combinedSource.join('\\n');\r\n\r\n    };\r\n\r\n    return runner.processor = processor;\r\n\r\n});\r\n"]}