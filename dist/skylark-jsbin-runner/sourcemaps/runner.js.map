{"version":3,"sources":["runner.js"],"names":["define","loopProtect","jsbin","runner","hit","line","console","warn","postMessage","parent","origin","error","args","concat","slice","call","arguments","window","alert","join","handleMessage","event","data","JSON","parse","e","message","commands","type","source","stringify"],"mappings":";;;;;;;AAAAA,QACG,sBACA,WACD,SAAUC,EAAYC,GAMpB,aACA,IAAIC,KA6DH,OAvDDF,EAAYG,IAAM,SAAUC,GAC1BC,QAAQC,KAAK,2CAA6CF,EAAO,iEACjEF,EAAOK,YAAY,iBAAkBH,IAMvCF,EAAOM,UACPN,EAAOM,OAAOC,OAAS,IAKvBP,EAAOQ,MAAQ,WACb,IAAIC,GAAQ,WAAWC,UAAUC,MAAMC,KAAKC,YAC5C,KAAM,YAAaC,QAAU,OAAOC,MAAMN,EAAKO,KAAK,OAOtDhB,EAAOiB,cAAgB,SAAUC,GAC/B,GAAKA,EAAMX,OAAX,CACA,IAAIY,EAAOD,EAAMC,KACjB,IACEA,EAA6B,iBAAfD,EAAMC,KAAoBC,KAAKC,MAAMH,EAAMC,MAAQD,EAAMC,KACvE,MAAOG,GACP,OAAOtB,EAAOQ,MAAM,4BAA6Bc,EAAEC,SAErD,GAAIvB,EAAOwB,UAAkD,mBAA/BxB,EAAOwB,SAASL,EAAKM,MACjD,OAAOzB,EAAOQ,MAAM,6BAA8BW,EAAKM,MAEzDzB,EAAOM,OAAOoB,OAASR,EAAMQ,OAC7B,IACE1B,EAAOwB,SAASL,EAAKM,MAAMN,EAAKA,MAChC,MAAOG,GACPtB,EAAOQ,MAAMc,EAAEC,YAOnBvB,EAAOK,YAAc,SAAUoB,EAAMN,GACnC,IAAKnB,EAAOM,OAAOoB,OACjB,OAAO1B,EAAOQ,MAAM,+CAEtBR,EAAOM,OAAOoB,OAAOrB,YAAYe,KAAKO,WACpCF,KAAMA,EACNN,KAAMA,IACJnB,EAAOM,OAAOC,SAGZR,EAAMC,OAASA","file":"../runner.js","sourcesContent":["define([\r\n   \"skylark-loopprotect\",\r\n   \"./jsbin\"\r\n],function (loopProtect,jsbin) {\r\n  /** ============================================================================\r\n   * JS Bin Runner\r\n   * Accepts incoming postMessage events and updates a live iframe accordingly.\r\n   * ========================================================================== */\r\n  /*globals sandbox loopProtect window alert */\r\n    'use strict';\r\n    var runner = {};\r\n\r\n    /**\r\n     * Update the loop protoction hit function to send an event up to the parent\r\n     * window so we can insert it in our error UI\r\n     */\r\n    loopProtect.hit = function (line) {\r\n      console.warn('Exiting potential infinite loop at line ' + line + '. To disable loop protection: add \"// noprotect\" to your code');\r\n      runner.postMessage('loopProtectHit', line);\r\n    }\r\n\r\n    /**\r\n     * Store what parent origin *should* be\r\n     */\r\n    runner.parent = {};\r\n    runner.parent.origin = '*';\r\n\r\n    /**\r\n     * Log error messages, indicating that it's from the runner.\r\n     */\r\n    runner.error = function () {\r\n      var args = ['Runner:'].concat([].slice.call(arguments));\r\n      if (!('console' in window)) {return alert(args.join(' '));}\r\n      //window.console.error.apply(console, args);\r\n    };\r\n\r\n    /**\r\n     * Handle all incoming postMessages to the runner\r\n     */\r\n    runner.handleMessage = function (event) {\r\n      if (!event.origin) {return;}\r\n      var data = event.data;\r\n      try {\r\n        data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;\r\n      } catch (e) {\r\n        return runner.error('Error parsing event data:', e.message);\r\n      }\r\n      if (runner.commands && typeof runner.commands[data.type] !== 'function') {\r\n        return runner.error('No matching event handler:', data.type);\r\n      }\r\n      runner.parent.source = event.source;\r\n      try {\r\n        runner.commands[data.type](data.data);\r\n      } catch (e) {\r\n        runner.error(e.message);\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Send message to the parent window\r\n     */\r\n    runner.postMessage = function (type, data) {\r\n      if (!runner.parent.source) {\r\n        return runner.error('No postMessage connection to parent window.');\r\n      }\r\n      runner.parent.source.postMessage(JSON.stringify({\r\n        type: type,\r\n        data: data\r\n      }), runner.parent.origin);\r\n    };\r\n\r\n     return jsbin.runner = runner;\r\n\r\n});"]}