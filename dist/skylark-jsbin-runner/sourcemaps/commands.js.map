{"version":3,"sources":["commands.js"],"names":["define","runner","utils","sandbox","commands","render","data","options","injectCSS","active","style","contentDocument","getElementById","innerHTML","source","iframe","create","use","childDoc","childWindow","getIframeWindow","document","proxyConsole","methods","forEach","method","processor","open","write","runnerWindow","protect","loopProtect","console","reset","onerror","msg","url","line","col","error","_raw","stack","close","postMessage","wrap","console:run","cmd","eval","console:load:script","injectScript","err","console:load:dom","html","injectDOM"],"mappings":";;;;;;;AAAAA,QACG,WACA,UACA,aACD,SAAUC,EAAOC,EAAMC,GAMrB,aAEA,IAAIC,GAKJC,OAAkB,SAAUC,GAG1B,GAAIA,EAAKC,QAAQC,WACXL,EAAQM,OAAQ,CAClB,IAAIC,EAAQP,EAAQM,OAAOE,gBAAgBC,eAAe,aAC1D,GAAIF,EAEF,YADAA,EAAMG,UAAYP,EAAKQ,QAM7B,IAAIC,EAASZ,EAAQa,OAAOV,EAAKC,SACjCJ,EAAQc,IAAIF,EAAQ,WAClB,IAAIG,EAAWH,EAAOJ,gBAClBQ,EAAcjB,EAAMkB,gBAAgBL,GACnCG,IAAUA,EAAWC,EAAYE,UAGtCC,aAAaC,QAAQC,QAAQ,SAAUC,UAC9BH,aAAaG,KAKtB,IAAIX,EAASY,UAAUrB,OAAOC,EAAKQ,OAAQR,EAAKC,SAGhDW,EAASS,OAOTT,EAASU,MAAM,IAKfT,EAAYU,cACVP,aAAcA,aACdQ,QAASC,aAGXZ,EAAYa,QAAUV,aAGtBS,YAAYE,QAGZd,EAAYe,QAAU,SAAUC,EAAKC,EAAKC,EAAMC,EAAKC,GAInDjB,aAAakB,KAAK,QAASD,GAASA,EAAME,MAAQF,EAAME,MAAQN,EAAM,UAAYE,EAAO,MAM3FnB,EAASU,MAAMd,GAIfI,EAASwB,QAETzC,EAAO0C,YAAY,YAGnBxC,EAAQyC,KAAKzB,EAAab,EAAKC,YAOnCsC,cAA0B,SAAUC,GAClC3C,EAAQ4C,KAAKD,IAMfE,sBAAkC,SAAUZ,GAC1CjC,EAAQ8C,aAAab,EAAK,SAAUc,GAClC,GAAIA,EAAK,OAAOjD,EAAO0C,YAAY,4BAA6BO,GAChEjD,EAAO0C,YAAY,8BAA+BP,MAOtDe,mBAA+B,SAAUC,GACvCjD,EAAQkD,UAAUD,EAAM,SAAUF,GAChC,GAAIA,EAAK,OAAOjD,EAAO0C,YAAY,yBAA0BO,GAC7DjD,EAAO0C,YAAY,gCAIvB,OAAO1C,EAAOG,SAAWA","file":"../commands.js","sourcesContent":["define([\r\n   \"./runner\",\r\n   \"./utils\",\r\n   \"./sandbox\"\r\n],function (runner,utils,sandbox) {\r\n  /** ============================================================================\r\n   * JS Bin Runner\r\n   * Accepts incoming postMessage events and updates a live iframe accordingly.\r\n   * ========================================================================== */\r\n  /*globals sandbox loopProtect window alert */\r\n    'use strict';\r\n\r\n    var commands = {};\r\n\r\n    /**\r\n     * Render a new preview iframe using the posted source\r\n     */\r\n    commands.render = function (data) {\r\n      // if we're just changing CSS, let's try to inject the change\r\n      // instead of doing a full render\r\n      if (data.options.injectCSS) {\r\n        if (sandbox.active) {\r\n          var style = sandbox.active.contentDocument.getElementById('jsbin-css');\r\n          if (style) {\r\n            style.innerHTML = data.source;\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      var iframe = sandbox.create(data.options);\r\n      sandbox.use(iframe, function () {\r\n        var childDoc = iframe.contentDocument,\r\n            childWindow = utils.getIframeWindow(iframe);\r\n        if (!childDoc) childDoc = childWindow.document;\r\n\r\n        // Reset the console to the prototype state\r\n        proxyConsole.methods.forEach(function (method) {\r\n          delete proxyConsole[method];\r\n        });\r\n\r\n\r\n        // Process the source according to the options passed in\r\n        var source = processor.render(data.source, data.options);\r\n\r\n        // Start writing the page. This will clear any existing document.\r\n        childDoc.open();\r\n\r\n        // We need to write a blank line first – Firefox blows away things you add\r\n        // to the child window when you do the fist document.write.\r\n        // Note that each document.write fires a DOMContentLoaded in Firefox.\r\n        // This method exhibits synchronous and asynchronous behaviour, depending\r\n        // on the browser. Urg.\r\n        childDoc.write('');\r\n\r\n        // Give the child a reference to things it needs. This has to go here so\r\n        // that the user's code (that runs as a result of the following\r\n        // childDoc.write) can access the objects.\r\n        childWindow.runnerWindow = {\r\n          proxyConsole: proxyConsole,\r\n          protect: loopProtect,\r\n        };\r\n\r\n        childWindow.console = proxyConsole;\r\n\r\n        // Reset the loop protection before rendering\r\n        loopProtect.reset();\r\n\r\n        // if there's a parse error this will fire\r\n        childWindow.onerror = function (msg, url, line, col, error) {\r\n          // show an error on the jsbin console, but not the browser console\r\n          // (i.e. use _raw), because the browser will throw the native error\r\n          // which (hopefully) includes a link to the JavaScript VM at that time.\r\n          proxyConsole._raw('error', error && error.stack ? error.stack : msg + ' (line ' + line + ')');\r\n        };\r\n\r\n        // Write the source out. IE crashes if you have lots of these, so that's\r\n        // why the source is rendered above (processor.render) – it should be one\r\n        // string. IE's a sensitive soul.\r\n        childDoc.write(source);\r\n        // childDoc.documentElement.innerHTML = source;\r\n\r\n        // Close the document. This will fire another DOMContentLoaded.\r\n        childDoc.close();\r\n\r\n        runner.postMessage('complete');\r\n\r\n        // Setup the new window\r\n        sandbox.wrap(childWindow, data.options);\r\n      });\r\n    };\r\n\r\n    /**\r\n     * Run console commands against the iframe's scope\r\n     */\r\n    commands['console:run'] = function (cmd) {\r\n      sandbox.eval(cmd);\r\n    };\r\n\r\n    /**\r\n     * Load script into the apge\r\n     */\r\n    commands['console:load:script'] = function (url) {\r\n      sandbox.injectScript(url, function (err) {\r\n        if (err) return runner.postMessage('console:load:script:error', err);\r\n        runner.postMessage('console:load:script:success', url);\r\n      });\r\n    };\r\n\r\n    /**\r\n     * Load DOM into the apge\r\n     */\r\n    commands['console:load:dom'] = function (html) {\r\n      sandbox.injectDOM(html, function (err) {\r\n        if (err) return runner.postMessage('console:load:dom:error', err);\r\n        runner.postMessage('console:load:dom:success');\r\n      });\r\n    };\r\n\r\n    return runner.commands = commands;\r\n\r\n});"]}