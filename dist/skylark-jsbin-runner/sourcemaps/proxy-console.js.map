{"version":3,"sources":["proxy-console.js"],"names":["define","runner","proxyConsole","window","console","log","e","prototype","methods","forEach","method","originalArgs","slice","call","arguments","args","arg","newArgs","i","length","push","JSON","stringify","stringifyArgs","postMessage","shift","clear","apply"],"mappings":";;;;;;;AAAAA,QACG,YACD,SAAUC,GACR,aAMF,IAAIC,EAAgB,WAIlB,IAAMC,OAAOC,QAAQC,IAAI,aAAgB,MAAOC,IAAuB,EAEvE,IAAIJ,EAAe,aA8DnB,OAvCcA,EAAaK,UAAUC,SACnC,QAAS,QAAS,QAAS,OAAQ,MAAO,OAAQ,MAAO,QAAS,OAClE,QAAS,WAAY,SAAU,QAAS,QAAS,SAAU,QAC3D,eAAgB,UAAW,aAAc,OAAQ,UAAW,YAC5D,mBAGMC,QAAQ,SAAUC,GAExBR,EAAaK,UAAUG,GAAU,WAE/B,IAAIC,KAAkBC,MAAMC,KAAKC,WAC7BC,EA9BY,SAAUA,GAK5B,IAJA,IAGiCC,EAH7BC,KAGAC,EAAI,EAAGC,EAASJ,EAAKI,OACnBD,EAAIC,EAAQD,SAEG,KADnBF,EAAMD,EAAKG,IAETD,EAAQG,KAAK,aAEbH,EAAQG,KAAKC,KAAKC,UAAUN,IAGhC,OAAOC,EAiBMM,CAAcZ,GAGzBV,EAAOuB,YAAY,WACjBd,OAAmB,SAAXA,EAAoBC,EAAac,QAAUf,EACnDK,KAAiB,SAAXL,EAAoBK,EAAKH,MAAM,GAAKG,IAQxCZ,OAAOC,UACJA,QAAQM,KACXA,EAAS,OAGPP,OAAOC,SAAsB,SAAXM,IACL,UAAXA,GAAkC,UAAXA,GAAsBN,QAAQsB,QACvDtB,QAAQM,GAAQiB,MAAMvB,QAASO,OAOlC,IAAIT,EApEM,GAwEnB,OAAOD,EAAOC,aAAeA","file":"../proxy-console.js","sourcesContent":["define([\r\n   \"./runner\"\r\n],function (runner) {\r\n    'use strict';\r\n  /** =========================================================================\r\n   * Console\r\n   * Proxy console.logs out to the parent window\r\n   * ========================================================================== */\r\n\r\n  var proxyConsole = (function () {\r\n    'use strict';\r\n    /*global stringify, runner*/\r\n    var supportsConsole = true;\r\n    try { window.console.log('d[ o_0 ]b'); } catch (e) { supportsConsole = false; }\r\n\r\n    var proxyConsole = function() {};\r\n\r\n    /**\r\n     * Stringify all of the console objects from an array for proxying\r\n     */\r\n    var stringifyArgs = function (args) {\r\n      var newArgs = [];\r\n      // TODO this was forEach but when the array is [undefined] it wouldn't\r\n      // iterate over them\r\n      var i = 0, length = args.length, arg;\r\n      for(; i < length; i++) {\r\n        arg = args[i];\r\n        if (typeof arg === 'undefined') {\r\n          newArgs.push('undefined');\r\n        } else {\r\n          newArgs.push(JSON.stringify(arg));  // stringify => JSON.stringify\r\n        }\r\n      }\r\n      return newArgs;\r\n    };\r\n\r\n    // Create each of these methods on the proxy, and postMessage up to JS Bin\r\n    // when one is called.\r\n    var methods = proxyConsole.prototype.methods = [\r\n      'debug', 'clear', 'error', 'info', 'log', 'warn', 'dir', 'props', '_raw',\r\n      'group', 'groupEnd', 'dirxml', 'table', 'trace', 'assert', 'count',\r\n      'markTimeline', 'profile', 'profileEnd', 'time', 'timeEnd', 'timeStamp',\r\n      'groupCollapsed'\r\n    ];\r\n\r\n    methods.forEach(function (method) {\r\n      // Create console method\r\n      proxyConsole.prototype[method] = function () {\r\n        // Replace args that can't be sent through postMessage\r\n        var originalArgs = [].slice.call(arguments),\r\n            args = stringifyArgs(originalArgs);\r\n\r\n        // Post up with method and the arguments\r\n        runner.postMessage('console', {\r\n          method: method === '_raw' ? originalArgs.shift() : method,\r\n          args: method === '_raw' ? args.slice(1) : args\r\n        });\r\n\r\n        // If the browner supports it, use the browser console but ignore _raw,\r\n        // as _raw should only go to the proxy console.\r\n        // Ignore clear if it doesn't exist as it's beahviour is different than\r\n        // log and we let it fallback to jsconsole for the panel and to nothing\r\n        // for the browser console\r\n        if (window.console) {\r\n          if (!console[method]) {\r\n            method = 'log';\r\n          }\r\n\r\n          if (window.console && method !== '_raw') {\r\n            if (method !== 'clear' || (method === 'clear' && console.clear)) {\r\n              console[method].apply(console, originalArgs);\r\n            }\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    return new proxyConsole();\r\n\r\n  }());\r\n\r\n  return runner.proxyConsole = proxyConsole;\r\n});"]}