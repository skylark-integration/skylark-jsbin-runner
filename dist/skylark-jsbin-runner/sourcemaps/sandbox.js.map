{"version":3,"sources":["sandbox.js"],"names":["define","runner","utils","sandbox","target","old","active","state","guid","Date","create","iframe","document","createElement","setAttribute","id","use","done","Error","saveState","prependChild","setTimeout","iframes","getElementsByTagName","length","i","parentNode","removeChild","restoreState","win","getIframeWindow","scroll","scrollTo","x","y","scrollX","scrollY","wrap","childWindow","options","addEvent","throttle","postMessage","getSizeProperties","width","innerWidth","documentElement","clientWidth","height","innerHeight","clientHeight","offsetWidth","offsetHeight","eval","cmd","re","test","replace","all","str","arg","contentWindow","output","type","e","message","proxyConsole","injectScript","url","cb","childDocument","script","src","onload","onerror","body","appendChild","injectDOM","html","innerHTML"],"mappings":"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","file":"../sandbox.js","sourcesContent":["define([\r\n   \"./runner\",\r\n   \"./utils\"\r\n],function (runner,utils) {\r\n  /** ============================================================================\r\n   * Sandbox\r\n   * Handles creating and insertion of dynamic iframes\r\n   * ========================================================================== */\r\n\r\n  /*globals window document */\r\n\r\n    var sandbox = {};\r\n\r\n    /**\r\n     * Save the target container element, plus the old and active iframes.\r\n     */\r\n    sandbox.target = null;\r\n    sandbox.old = null;\r\n    sandbox.active = null;\r\n    sandbox.state = {};\r\n    sandbox.guid = +new Date(); // id used to keep track of which iframe is active\r\n\r\n    /**\r\n     * Create a new sandboxed iframe.\r\n     */\r\n    sandbox.create = function () {\r\n      var iframe = document.createElement('iframe');\r\n      // iframe.src = window.location.origin + '/runner-inner';\r\n      iframe.setAttribute('sandbox', 'allow-modals allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts');\r\n      iframe.setAttribute('frameBorder', '0');\r\n      iframe.setAttribute('name', 'JS Bin Output ');\r\n      iframe.id = sandbox.guid++;\r\n      // sandbox.active = iframe;\r\n      return iframe;\r\n    };\r\n\r\n    /**\r\n     * Add a new iframe to the page and wait until it has loaded to call the\r\n     * requester back. Also wait until the new iframe has loaded before removing\r\n     * the old one.\r\n     */\r\n    /**\r\n     * Add a new iframe to the page and wait until it has loaded to call the\r\n     * requester back. Also wait until the new iframe has loaded before removing\r\n     * the old one.\r\n     */\r\n    sandbox.use = function (iframe, done) {\r\n      if (!sandbox.target) {\r\n        throw new Error('Sandbox has no target element.');\r\n      }\r\n      sandbox.old = sandbox.active;\r\n      sandbox.saveState(sandbox.old);\r\n      sandbox.active = iframe;\r\n      utils.prependChild(sandbox.target, iframe);\r\n      // setTimeout allows the iframe to be rendered before other code runs,\r\n      // allowing us access to the calculated properties like innerWidth.\r\n      setTimeout(function () {\r\n        // call the code that renders the iframe source\r\n        if (done) {\r\n          done();\r\n        }\r\n\r\n        // remove *all* the iframes, baring the active one\r\n        var iframes = sandbox.target.getElementsByTagName('iframe');\r\n        var length = iframes.length;\r\n        var i = 0;\r\n        var id = sandbox.active.id;\r\n        var iframe;\r\n\r\n        for (; iframe = iframes[i], i < length; i++) {\r\n          if (iframe.id !== id) {\r\n            iframe.parentNode.removeChild(iframe);\r\n            length--;\r\n          }\r\n        }\r\n      }, 0);\r\n    };\r\n\r\n    /**\r\n     * Restore the state of a prvious iframe, like scroll position.\r\n     */\r\n    sandbox.restoreState = function (iframe, state) {\r\n      if (!iframe) return {};\r\n      var win = utils.getIframeWindow(iframe);\r\n      if (!win) return {};\r\n      if (state.scroll) {\r\n        win.scrollTo(state.scroll.x, state.scroll.y);\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Save the state of an iframe, like scroll position.\r\n     */\r\n    sandbox.saveState = function (iframe) {\r\n      if (!iframe) return {};\r\n      var win = utils.getIframeWindow(iframe);\r\n      if (!win) return {};\r\n      return {\r\n        scroll: {\r\n          x: win.scrollX,\r\n          y: win.scrollY\r\n        }\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Attach event listeners and rpevent some default behaviour on the new\r\n     * window during live rendering.\r\n     */\r\n    sandbox.wrap = function (childWindow, options) {\r\n      if (!childWindow) return;\r\n      options = options || {};\r\n\r\n      // Notify the parent of resize events (and send one straight away)\r\n      utils.addEvent(childWindow, 'resize', utils.throttle(function () {\r\n        runner.postMessage('resize', sandbox.getSizeProperties(childWindow));\r\n      }, 25));\r\n\r\n      runner.postMessage('resize', sandbox.getSizeProperties(childWindow));\r\n\r\n      // Notify the parent of a focus\r\n      utils.addEvent(childWindow, 'focus', function () {\r\n        runner.postMessage('focus');\r\n      });\r\n\r\n    };\r\n\r\n    sandbox.getSizeProperties = function (childWindow) {\r\n      return {\r\n        width: childWindow.innerWidth || childWindow.document.documentElement.clientWidth,\r\n        height: childWindow.innerHeight || childWindow.document.documentElement.clientHeight,\r\n        offsetWidth: childWindow.document.documentElement.offsetWidth,\r\n        offsetHeight: childWindow.document.documentElement.offsetHeight\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Evaluate a command against the active iframe, then use the proxy console\r\n     * to fire information up to the parent\r\n     */\r\n    sandbox.eval = function (cmd) {\r\n      if (!sandbox.active) throw new Error(\"sandbox.eval: has no active iframe.\");\r\n\r\n      var re = /(^.|\\b)console\\.(\\S+)/g;\r\n\r\n      if (re.test(cmd)) {\r\n        var replaceWith = 'window.runnerWindow.proxyConsole.';\r\n        cmd = cmd.replace(re, function (all, str, arg) {\r\n          return replaceWith + arg;\r\n        });\r\n      }\r\n\r\n      var childWindow = sandbox.active.contentWindow;\r\n      var output = null,\r\n          type = 'log';\r\n      try {\r\n        output = childWindow.eval(cmd);\r\n      } catch (e) {\r\n        output = e.message;\r\n        type = 'error';\r\n      }\r\n\r\n      return proxyConsole[type](output);\r\n    };\r\n\r\n    /**\r\n     * Inject a script via a URL into the page\r\n     */\r\n    sandbox.injectScript = function (url, cb) {\r\n      if (!sandbox.active) throw new Error(\"sandbox.injectScript: has no active iframe.\");\r\n      var childWindow = sandbox.active.contentWindow,\r\n          childDocument = childWindow.document;\r\n      var script = childDocument.createElement('script');\r\n      script.src = url;\r\n      script.onload = function () {\r\n        cb();\r\n      };\r\n      script.onerror = function () {\r\n        cb('Failed to load \"' + url + '\"');\r\n      };\r\n      childDocument.body.appendChild(script);\r\n    };\r\n\r\n    /**\r\n     * Inject full DOM into the page\r\n     */\r\n    sandbox.injectDOM = function (html, cb) {\r\n      if (!sandbox.active) throw new Error(\"sandbox.injectDOM: has no active iframe.\");\r\n      var childWindow = sandbox.active.contentWindow,\r\n          childDocument = childWindow.document;\r\n      try {\r\n        childDocument.body.innerHTML = html;\r\n      } catch (e) {\r\n        cb(\"Failed to load DOM.\");\r\n      }\r\n      cb();\r\n    };\r\n\r\n    return runner.sandbox = sandbox;\r\n\r\n});"]}