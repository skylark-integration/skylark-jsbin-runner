{"version":3,"sources":["sandbox.js"],"names":["define","loopProtect","Sandbox","runner","utils","proxyConsole","processor","_sandbox","sandbox","init","el","cssTextTagId","render","data","reset","source","codes","prepare","options","postMessage","injectScript","url","cb","injectDOM","html","injectCssText","cssText","eval","cmd","isActive","active"],"mappings":";;;;;;;AAAAA,QACG,sBACA,wCACA,WACA,UACA,kBACA,eACD,SAAUC,EAAYC,EAAQC,EAAOC,EAAMC,EAAaC,GACtD,aAwKA,IAAIC,EAIJ,OAAOJ,EAAOK,SACZC,KAAO,SAASC,GACdH,EAAW,IAAIL,EAAQQ,GACrBC,aAAe,eAOnBC,OAAS,SAAUC,GAiFjBZ,EAAYa,SAGPD,EAAKE,QAAUF,EAAKG,QACvBH,EAAKE,OAAST,EAAUW,QAAQJ,EAAKG,QAEvC,IAAID,EAAST,EAAUM,OAAOC,EAAKE,OAAQF,EAAKK,SAEhDL,EAAKK,QAAQb,aAAeA,EAC5BQ,EAAKK,QAAQjB,YAAcA,EAE3BM,EAASK,OAAOG,EAAOF,EAAKK,SAE5Bf,EAAOgB,YAAY,aAIrBC,aAAe,SAAUC,EAAKC,GAC5B,OAAOf,EAASa,aAAaC,EAAIC,IAGnCC,UAAY,SAAUC,EAAMF,GAC1B,OAAOf,EAASgB,UAAUC,EAAKF,IAGjCG,cAAgB,SAASC,GACvB,OAAOnB,EAASkB,cAAcC,IAGhCC,KAAO,SAASC,GACd,OAAOrB,EAASoB,KAAKC,IAGvBC,SAAW,WACT,QAAStB,EAASuB","file":"../sandbox.js","sourcesContent":["define([\r\n   \"skylark-loopprotect\",\r\n   \"skylark-domx-plugins-sandboxs/sandbox\",\r\n   \"./runner\",\r\n   \"./utils\",\r\n   \"./proxy-console\",\r\n   \"./processor\"\r\n],function (loopProtect,Sandbox,runner,utils,proxyConsole,processor) {\r\n    'use strict';\r\n  /** ============================================================================\r\n   * Sandbox\r\n   * Handles creating and insertion of dynamic iframes\r\n   * ========================================================================== */\r\n   /*\r\n\r\n    var sandbox = {};\r\n\r\n\r\n    sandbox.target = null;\r\n    sandbox.old = null;\r\n    sandbox.active = null;\r\n    sandbox.state = {};\r\n    sandbox.guid = +new Date(); // id used to keep track of which iframe is active\r\n\r\n\r\n    sandbox.create = function () {\r\n      var iframe = document.createElement('iframe');\r\n      // iframe.src = window.location.origin + '/runner-inner';\r\n      iframe.setAttribute('sandbox', 'allow-modals allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts');\r\n      iframe.setAttribute('frameBorder', '0');\r\n      iframe.setAttribute('name', 'JS Bin Output ');\r\n      iframe.id = sandbox.guid++;\r\n      // sandbox.active = iframe;\r\n      return iframe;\r\n    };\r\n\r\n    sandbox.use = function (iframe, done) {\r\n      if (!sandbox.target) {\r\n        throw new Error('Sandbox has no target element.');\r\n      }\r\n      sandbox.old = sandbox.active;\r\n      sandbox.saveState(sandbox.old);\r\n      sandbox.active = iframe;\r\n      utils.prependChild(sandbox.target, iframe);\r\n      // setTimeout allows the iframe to be rendered before other code runs,\r\n      // allowing us access to the calculated properties like innerWidth.\r\n      setTimeout(function () {\r\n        // call the code that renders the iframe source\r\n        if (done) {\r\n          done();\r\n        }\r\n\r\n        // remove *all* the iframes, baring the active one\r\n        var iframes = sandbox.target.getElementsByTagName('iframe');\r\n        var length = iframes.length;\r\n        var i = 0;\r\n        var id = sandbox.active.id;\r\n        var iframe;\r\n\r\n        for (; iframe = iframes[i], i < length; i++) {\r\n          if (iframe.id !== id) {\r\n            iframe.parentNode.removeChild(iframe);\r\n            length--;\r\n          }\r\n        }\r\n      }, 0);\r\n    };\r\n\r\n\r\n    sandbox.restoreState = function (iframe, state) {\r\n      if (!iframe) return {};\r\n      var win = utils.getIframeWindow(iframe);\r\n      if (!win) return {};\r\n      if (state.scroll) {\r\n        win.scrollTo(state.scroll.x, state.scroll.y);\r\n      }\r\n    };\r\n\r\n\r\n    sandbox.saveState = function (iframe) {\r\n      if (!iframe) return {};\r\n      var win = utils.getIframeWindow(iframe);\r\n      if (!win) return {};\r\n      return {\r\n        scroll: {\r\n          x: win.scrollX,\r\n          y: win.scrollY\r\n        }\r\n      };\r\n    };\r\n\r\n\r\n    sandbox.wrap = function (childWindow, options) {\r\n      if (!childWindow) return;\r\n      options = options || {};\r\n\r\n      // Notify the parent of resize events (and send one straight away)\r\n      utils.addEvent(childWindow, 'resize', utils.throttle(function () {\r\n        runner.postMessage('resize', sandbox.getSizeProperties(childWindow));\r\n      }, 25));\r\n\r\n      runner.postMessage('resize', sandbox.getSizeProperties(childWindow));\r\n\r\n      // Notify the parent of a focus\r\n      utils.addEvent(childWindow, 'focus', function () {\r\n        runner.postMessage('focus');\r\n      });\r\n\r\n    };\r\n\r\n    sandbox.getSizeProperties = function (childWindow) {\r\n      return {\r\n        width: childWindow.innerWidth || childWindow.document.documentElement.clientWidth,\r\n        height: childWindow.innerHeight || childWindow.document.documentElement.clientHeight,\r\n        offsetWidth: childWindow.document.documentElement.offsetWidth,\r\n        offsetHeight: childWindow.document.documentElement.offsetHeight\r\n      };\r\n    };\r\n\r\n\r\n    sandbox.eval = function (cmd) {\r\n      if (!sandbox.active) throw new Error(\"sandbox.eval: has no active iframe.\");\r\n\r\n      var re = /(^.|\\b)console\\.(\\S+)/g;\r\n\r\n      if (re.test(cmd)) {\r\n        var replaceWith = 'window.runnerWindow.proxyConsole.';\r\n        cmd = cmd.replace(re, function (all, str, arg) {\r\n          return replaceWith + arg;\r\n        });\r\n      }\r\n\r\n      var childWindow = sandbox.active.contentWindow;\r\n      var output = null,\r\n          type = 'log';\r\n      try {\r\n        output = childWindow.eval(cmd);\r\n      } catch (e) {\r\n        output = e.message;\r\n        type = 'error';\r\n      }\r\n\r\n      return proxyConsole[type](output);\r\n    };\r\n\r\n\r\n    sandbox.injectScript = function (url, cb) {\r\n      if (!sandbox.active) throw new Error(\"sandbox.injectScript: has no active iframe.\");\r\n      var childWindow = sandbox.active.contentWindow,\r\n          childDocument = childWindow.document;\r\n      var script = childDocument.createElement('script');\r\n      script.src = url;\r\n      script.onload = function () {\r\n        cb();\r\n      };\r\n      script.onerror = function () {\r\n        cb('Failed to load \"' + url + '\"');\r\n      };\r\n      childDocument.body.appendChild(script);\r\n    };\r\n\r\n\r\n    sandbox.injectDOM = function (html, cb) {\r\n      if (!sandbox.active) throw new Error(\"sandbox.injectDOM: has no active iframe.\");\r\n      var childWindow = sandbox.active.contentWindow,\r\n          childDocument = childWindow.document;\r\n      try {\r\n        childDocument.body.innerHTML = html;\r\n      } catch (e) {\r\n        cb(\"Failed to load DOM.\");\r\n      }\r\n      cb();\r\n    };\r\n\r\n    */\r\n\r\n    var _sandbox;\r\n\r\n\r\n\r\n    return runner.sandbox = {\r\n      init : function(el) {\r\n        _sandbox = new Sandbox(el,{\r\n          cssTextTagId : 'jsbin-css'\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Render a new preview iframe using the posted source\r\n       */\r\n      render : function (data) {\r\n        /*\r\n        // if we're just changing CSS, let's try to inject the change\r\n        // instead of doing a full render\r\n        if (data.options.injectCSS) {\r\n          if (sandbox.active) {\r\n            var style = sandbox.active.contentDocument.getElementById('jsbin-css');\r\n            if (style) {\r\n              ///style.innerHTML = data.source; // lwf\r\n              style.innerHTML = data.source || (data.codes && data.codes.css);\r\n              return;\r\n            }\r\n          }\r\n        }\r\n\r\n        var iframe = sandbox.create(data.options);\r\n        sandbox.use(iframe, function () {\r\n          var childDoc = iframe.contentDocument,\r\n              childWindow = utils.getIframeWindow(iframe);\r\n          if (!childDoc) childDoc = childWindow.document;\r\n\r\n          // Reset the console to the prototype state\r\n          proxyConsole.methods.forEach(function (method) {\r\n            delete proxyConsole[method];\r\n          });\r\n\r\n\r\n          // Process the source according to the options passed in\r\n          if (!data.source && data.codes) { // added by lwf\r\n            data.source = processor.prepare(data.codes);\r\n          }\r\n          var source = processor.render(data.source, data.options);\r\n\r\n          // Start writing the page. This will clear any existing document.\r\n          childDoc.open();\r\n\r\n          // We need to write a blank line first â€“ Firefox blows away things you add\r\n          // to the child window when you do the fist document.write.\r\n          // Note that each document.write fires a DOMContentLoaded in Firefox.\r\n          // This method exhibits synchronous and asynchronous behaviour, depending\r\n          // on the browser. Urg.\r\n          childDoc.write('');\r\n\r\n          // Give the child a reference to things it needs. This has to go here so\r\n          // that the user's code (that runs as a result of the following\r\n          // childDoc.write) can access the objects.\r\n          childWindow.runnerWindow = {\r\n            proxyConsole: proxyConsole,\r\n            protect: loopProtect,\r\n          };\r\n\r\n          childWindow.console = proxyConsole;\r\n\r\n          // Reset the loop protection before rendering\r\n          loopProtect.reset(); //TODO:\r\n\r\n          // if there's a parse error this will fire\r\n          childWindow.onerror = function (msg, url, line, col, error) {\r\n            // show an error on the jsbin console, but not the browser console\r\n            // (i.e. use _raw), because the browser will throw the native error\r\n            // which (hopefully) includes a link to the JavaScript VM at that time.\r\n            proxyConsole._raw('error', error && error.stack ? error.stack : msg + ' (line ' + line + ')');\r\n          };\r\n\r\n          // Write the source out. IE crashes if you have lots of these, so that's\r\n          // why the source is rendered above (processor.render) â€“ it should be one\r\n          // string. IE's a sensitive soul.\r\n          childDoc.write(source);\r\n          // childDoc.documentElement.innerHTML = source;\r\n\r\n          // Close the document. This will fire another DOMContentLoaded.\r\n          childDoc.close();\r\n\r\n          runner.postMessage('complete');\r\n\r\n          // Setup the new window\r\n          sandbox.wrap(childWindow, data.options);\r\n        });\r\n        */\r\n\r\n        // Reset the loop protection before rendering\r\n        loopProtect.reset(); //TODO:\r\n\r\n        // Process the source according to the options passed in\r\n        if (!data.source && data.codes) { // added by lwf\r\n          data.source = processor.prepare(data.codes);\r\n        }\r\n        var source = processor.render(data.source, data.options);\r\n\r\n        data.options.proxyConsole = proxyConsole;\r\n        data.options.loopProtect = loopProtect;\r\n\r\n        _sandbox.render(source,data.options);\r\n\r\n        runner.postMessage('complete');\r\n\r\n      },\r\n\r\n      injectScript : function (url, cb) {\r\n        return _sandbox.injectScript(url,cb);\r\n      },\r\n\r\n      injectDOM : function (html, cb)  {\r\n        return _sandbox.injectDOM(html,cb);\r\n      },\r\n      \r\n      injectCssText : function(cssText) {\r\n        return _sandbox.injectCssText(cssText);\r\n      },\r\n      \r\n      eval : function(cmd){\r\n        return _sandbox.eval(cmd);\r\n      },\r\n\r\n      isActive : function() {\r\n        return !!_sandbox.active;\r\n      }\r\n\r\n    };\r\n\r\n});"]}